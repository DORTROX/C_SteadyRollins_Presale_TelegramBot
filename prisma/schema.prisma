// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid()) @map("_id")
  Telegram_Username String   @unique
  // bots
  createdAt         DateTime @default(now())
  Bots              Bot[]
}

model Bot {
  id             String   @id @default(cuid()) @map("_id")
  bot_id         String   @unique
  bot_name       String
  bot_token      String
  tokenAddress   String?
  user_Id        String
  WelcomeMessage String   @default("Welcome to the BOT!")
  SuccessMessage String   @default("Woohoo. You bought the tokens. Check your wallet.")
  createdAt      DateTime @default(now())
  owner          User     @relation(fields: [user_Id], references: [id])
  Presale        Presale?
  Airdrop        Airdrop?
}

model Presale {
  id             String         @id @default(cuid()) @map("_id")
  bot_Id         String         @unique
  presale_supply Float
  presale_supplyLeft  Float
  presale_stage  PresaleStage[]
  createdAt      DateTime       @default(now())
  bot            Bot            @relation(fields: [bot_Id], references: [id])
}

model PresaleStage {
  id              String   @id @default(cuid()) @map("_id")
  presale_Id      String
  stageName       String
  tokenPrice      Float
  tokensPerSOL    Int
  stageStart      DateTime
  stageEnd        DateTime
  createdAt       DateTime @default(now())
  presale         Presale  @relation(fields: [presale_Id], references: [id])
}


model UserAirdropWon {
  id                 String   @id @default(cuid()) @map("_id")
  user_Id            String
  airdrop_Id         String
  createdAt          DateTime @default(now())
  tokenAmount        Float
  tokenAmountClaimed Float
  airdropRoot        Airdrop  @relation(fields: [id], references: [id])
}

model Airdrop {
  id                   String           @id @default(cuid()) @map("_id")
  bot_Id               String           @unique
  airdrop_name         String
  airdrop_token        String
  airdrop_total_amount Float
  airdrop_start        DateTime         @default(now())
  airdrop_end          DateTime?
  Winners              UserAirdropWon[]
  createdAt            DateTime         @default(now())
  bot                  Bot              @relation(fields: [bot_Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
